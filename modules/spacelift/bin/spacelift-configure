#!/bin/bash

set -ex

# Link the default terraform binary to Spacelift's Terraform installation path of `/bin/terraform`.
# Because the Terraform commands are executed as just `terraform` by `atmos` (unless otherwise specified)
# and also in scripts, and the default PATH has `/usr/bin` before `/bin`,
# plain 'terraform' would otherwise resolve to the Docker container's
# chosen version of Terraform, not Spacelift's configured version.

ln -sfTv /bin/terraform /usr/bin/terraform
echo "Using Terraform: "
which terraform
terraform version

# Remove -x for security and cleaner output
set +x

# Log the AWS authentication settings
identity=$(unset AWS_PROFILE && aws sts get-caller-identity --query Arn --output text)

printf "\nIAM Role without profile is %s\n\n" "$identity"

# If you want to have dynamic AWS config file or profile selection, do it here.
# For example:
#    if (printf "%s" "$identity" | grep -q -- -prod-); then
#      printf "Detected production\n\n"
#      ln -sfTv /etc/aws-config/aws-config-spacelift-production /etc/aws-config/aws-config-spacelift
#    else
#      printf "Configuring for non-production environment\n\n"
#      ln -sfTv /etc/aws-config/aws-config-spacelift-non-production /etc/aws-config/aws-config-spacelift
#    fi

printf "\nAWS_CONFIG_FILE set to %s\n" "$AWS_CONFIG_FILE"
printf "AWS_PROFILE set to %s\n\n" "$AWS_PROFILE"

echo "+ crudini --get --format=ini $AWS_CONFIG_FILE \"profile $AWS_PROFILE\""
crudini --get --format=ini $AWS_CONFIG_FILE "profile $AWS_PROFILE"

effective_arn="$(aws sts get-caller-identity --query Arn --output text)"

printf "\nEffective AWS Role Arn is %s\n\n\n" "$effective_arn"
