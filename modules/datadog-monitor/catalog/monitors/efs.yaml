# The official Datadog API documentation with available query parameters & alert types:
# https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor

efs-throughput-utilization-check:
  name: "(EFS) ${tenant} ${ stage } - % Throughput Utilization"
  type: metric alert
  query: |
    avg(last_1h):(sum:aws.efs.metered_iobytes{stage:${ stage }} by {filesystemid} * 100 / 1048576) / (sum:aws.efs.permitted_throughput{stage:${ stage }} by {filesystemid,stage,tenant,environment,team} / 1048576) > 75
  message: |
    ({{tenant.name}}-{{environment.name}}-{{stage.name}}) {{filesystemid}} Throughput Utilization is too high
  escalation_message: ""
  tags:
    managed-by: Terraform
  notify_no_data: false
  notify_audit: true
  require_full_window: false
  enable_logs_sample: false
  force_delete: true
  include_tags: true
  locked: false
  renotify_interval: 60
  timeout_h: 24
  evaluation_delay: 60
  new_host_delay: 300
  no_data_timeframe: 10
  threshold_windows: { }
  thresholds:
    critical: 75
    warning: 50
    #unknown:
    #ok:
    #critical_recovery:
    #warning_recovery:

# The official Datadog API documentation with available query parameters & alert types:
# https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor

efs-burst-balance:
  name: "(EFS) ${tenant} ${ stage } - Burst Balance Low (< 100 GB)"
  type: metric alert
  query: |
    min(last_1h):avg:aws.efs.burst_credit_balance{stage:${ stage }} by {filesystemid,stage,tenant,environment,team} < 100000000000
  message: |
    ({{tenant.name}}-{{environment.name}}-{{stage.name}}) {{filesystemid}} EFS Burst Balance for {{filesystemid}} dipped below 100 GB.
  escalation_message: ""
  tags:
    managed-by: Terraform
  notify_no_data: false
  notify_audit: true
  require_full_window: false
  enable_logs_sample: false
  force_delete: true
  include_tags: true
  locked: false
  renotify_interval: 60
  timeout_h: 24
  evaluation_delay: 60
  new_host_delay: 300
  no_data_timeframe: 10
  threshold_windows: { }
  thresholds:
    critical: 100000000000 # 100 GB
    warning:  1000000000000 # 1TB
    #unknown:
    #ok:
    #critical_recovery:
    #warning_recovery:


efs-io-percent-limit:
  name: "(EFS) ${tenant} ${ stage } - I/O limit has been reached (> 90%)"
  type: metric alert
  query: |
    max(last_1h):avg:aws.efs.percent_iolimit{stage:${ stage }} by {filesystemid,stage,tenant,environment,team} > 90
  message: |
    ({{tenant.name}}-{{environment.name}}-{{stage.name}}) {{filesystemid}} EFS I/O limit has been reached for fs {{filesystemid}}.
  escalation_message: ""
  tags:
    managed-by: Terraform
  notify_no_data: false
  notify_audit: true
  require_full_window: false
  enable_logs_sample: false
  force_delete: true
  include_tags: true
  locked: false
  renotify_interval: 60
  timeout_h: 24
  evaluation_delay: 60
  new_host_delay: 300
  no_data_timeframe: 10
  threshold_windows: { }
  thresholds:
    critical: 90
    warning: 50
    #unknown:
    #ok:
    #critical_recovery:
    #warning_recovery:

efs-client-connection-anomaly:
  name: "(EFS) ${tenant} ${ stage } - Client Connection Anomaly"
  type: metric alert
  query: |
    avg(last_4h):anomalies(avg:aws.efs.client_connections{stage:${ stage }} by {aws_account,filesystemid,name,stage,tenant,environment,team}.as_count(), 'basic', 2, direction='both', alert_window='last_15m', interval=60, count_default_zero='true') >= 1
  message: |
    ({{tenant.name}}-{{environment.name}}-{{stage.name}}) [{{name}}] EFS Client Connection Anomoly for filesystem {{filesystemid}}.
  escalation_message: ""
  tags:
    managed-by: Terraform
  notify_no_data: false
  notify_audit: true
  require_full_window: false
  enable_logs_sample: false
  force_delete: true
  include_tags: true
  locked: false
  renotify_interval: 60
  timeout_h: 24
  evaluation_delay: 60
  new_host_delay: 300
  no_data_timeframe: 10
  threshold_windows: { }
  thresholds:
    critical: 1
    critical_recovery: 0
    #warning:
    #unknown:
    #ok:
    #warning_recovery:
